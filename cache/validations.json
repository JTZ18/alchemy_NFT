{
  "version": "3.2",
  "log": [
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "8eebea40a6c6d5e9233c28e71e8e376e48bec74c2379446a84d410bc8837f3fb",
          "withoutMetadata": "c27559f13002c2fc91544ee334c4af3167447aabbcde734326941801f7d3ab86",
          "linkedWithoutMetadata": "c27559f13002c2fc91544ee334c4af3167447aabbcde734326941801f7d3ab86"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "IERC721Enumerable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "9e5502b5a3a2e261f1b45be73db52afffa8a54c86c3f85f3ea2cfd8e9576dd79",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "4a26bb39c38c99454c7d02ffd0dab21f159d85e65fde7b74e3551f1f63418b07",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MyNFT": {
        "src": "contracts/MyNFT.sol:7",
        "version": {
          "withMetadata": "fc246a7c6c7483539e93351c44e744c2daead80b1a6b3f6a8436b42570fb2106",
          "withoutMetadata": "67339fc4ee96e49a574ed8d0226eba2f00eceeb2c593c5aa9c072f80cdd4dcd4",
          "linkedWithoutMetadata": "67339fc4ee96e49a574ed8d0226eba2f00eceeb2c593c5aa9c072f80cdd4dcd4"
        },
        "inherit": [
          "Ownable",
          "ERC721Enumerable",
          "IERC721Enumerable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "(string,string,string,string)",
          "mint(uint256)",
          "isWhitelisted(address)",
          "walletOfOwner(address)",
          "tokenURI(uint256)",
          "reveal()",
          "setNftPerAddressLimit(uint256)",
          "setCost(uint256)",
          "setmaxMintAmount(uint256)",
          "setBaseURI(string)",
          "setBaseExtension(string)",
          "setNotRevealedURI(string)",
          "pause(bool)",
          "setOnlyWhitelisted(bool)",
          "whitelistUsers(address[])",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/MyNFT.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "baseExtension",
            "src": "contracts/MyNFT.sol:11"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cost",
            "src": "contracts/MyNFT.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/MyNFT.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxMintAmount",
            "src": "contracts/MyNFT.sol:15"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nftPerAddressLimit",
            "src": "contracts/MyNFT.sol:16"
          },
          {
            "kind": "state-variable-assignment",
            "name": "paused",
            "src": "contracts/MyNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "revealed",
            "src": "contracts/MyNFT.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "onlyWhitelisted",
            "src": "contracts/MyNFT.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MyNFT",
              "label": "baseURI",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:10"
            },
            {
              "contract": "MyNFT",
              "label": "baseExtension",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:11"
            },
            {
              "contract": "MyNFT",
              "label": "notRevealedUri",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:12"
            },
            {
              "contract": "MyNFT",
              "label": "cost",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:13"
            },
            {
              "contract": "MyNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:14"
            },
            {
              "contract": "MyNFT",
              "label": "maxMintAmount",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:15"
            },
            {
              "contract": "MyNFT",
              "label": "nftPerAddressLimit",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:16"
            },
            {
              "contract": "MyNFT",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:17"
            },
            {
              "contract": "MyNFT",
              "label": "revealed",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:18"
            },
            {
              "contract": "MyNFT",
              "label": "onlyWhitelisted",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:19"
            },
            {
              "contract": "MyNFT",
              "label": "whitelistedAddresses",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/MyNFT.sol:20"
            },
            {
              "contract": "MyNFT",
              "label": "addressMintedBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/MyNFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Address": {
        "src": "contracts/MyNFT.sol:188",
        "version": {
          "withMetadata": "22fb04e82cd3a014d74eb5e9057ca8e038dd41613adc2723edd9cb8f0ba0c30f",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "contracts/MyNFT.sol:370"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "contracts/MyNFT.sol:90",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "contracts/MyNFT.sol:483",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "contracts/MyNFT.sol:716",
        "version": {
          "withMetadata": "41464907299321ed53abf69d03b5ca04e3badcc4445c186fc87a1747f55dfd4b",
          "withoutMetadata": "a05fb653d77a13f4c91de9c0cdb79332054c80eb2fdbf0c188fddceab29df224",
          "linkedWithoutMetadata": "a05fb653d77a13f4c91de9c0cdb79332054c80eb2fdbf0c188fddceab29df224"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "contracts/MyNFT.sol:741"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:721"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:724"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/MyNFT.sol:727"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/MyNFT.sol:730"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "contracts/MyNFT.sol:733"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/MyNFT.sol:736"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721Enumerable": {
        "src": "contracts/MyNFT.sol:1160",
        "inherit": [
          "IERC721Enumerable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "contracts/MyNFT.sol:1162"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/MyNFT.sol:1165"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "contracts/MyNFT.sol:1168"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "contracts/MyNFT.sol:1171"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "contracts/MyNFT.sol:449",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "contracts/MyNFT.sol:503",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "contracts/MyNFT.sol:649",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "contracts/MyNFT.sol:680",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "contracts/MyNFT.sol:415",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MyNFT": {
        "src": "contracts/MyNFT.sol:1322",
        "version": {
          "withMetadata": "a6020793eb4b5643cbc80c6fb605f5f2bfe98314cfd9e9050ee158f671a85c40",
          "withoutMetadata": "d471e368f5e857584cb24d2eb567bfd2241250ff8efabc690df582d2604e2f31",
          "linkedWithoutMetadata": "d471e368f5e857584cb24d2eb567bfd2241250ff8efabc690df582d2604e2f31"
        },
        "inherit": [
          "Ownable",
          "ERC721Enumerable",
          "IERC721Enumerable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "(string,string,string,string)",
          "mint(uint256)",
          "isWhitelisted(address)",
          "walletOfOwner(address)",
          "tokenURI(uint256)",
          "reveal()",
          "unreveal()",
          "setNftPerAddressLimit(uint256)",
          "setCost(uint256)",
          "setmaxMintAmount(uint256)",
          "setBaseURI(string)",
          "setBaseExtension(string)",
          "setNotRevealedURI(string)",
          "pause(bool)",
          "setOnlyWhitelisted(bool)",
          "whitelistUsers(address[])",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/MyNFT.sol:1338"
          },
          {
            "kind": "state-variable-assignment",
            "name": "baseExtension",
            "src": "contracts/MyNFT.sol:1326"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cost",
            "src": "contracts/MyNFT.sol:1328"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/MyNFT.sol:1329"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxMintAmount",
            "src": "contracts/MyNFT.sol:1330"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nftPerAddressLimit",
            "src": "contracts/MyNFT.sol:1331"
          },
          {
            "kind": "state-variable-assignment",
            "name": "paused",
            "src": "contracts/MyNFT.sol:1332"
          },
          {
            "kind": "state-variable-assignment",
            "name": "revealed",
            "src": "contracts/MyNFT.sol:1333"
          },
          {
            "kind": "state-variable-assignment",
            "name": "onlyWhitelisted",
            "src": "contracts/MyNFT.sol:1334"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MyNFT",
              "label": "baseURI",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:1325"
            },
            {
              "contract": "MyNFT",
              "label": "baseExtension",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:1326"
            },
            {
              "contract": "MyNFT",
              "label": "notRevealedUri",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:1327"
            },
            {
              "contract": "MyNFT",
              "label": "cost",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:1328"
            },
            {
              "contract": "MyNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:1329"
            },
            {
              "contract": "MyNFT",
              "label": "maxMintAmount",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:1330"
            },
            {
              "contract": "MyNFT",
              "label": "nftPerAddressLimit",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:1331"
            },
            {
              "contract": "MyNFT",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:1332"
            },
            {
              "contract": "MyNFT",
              "label": "revealed",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:1333"
            },
            {
              "contract": "MyNFT",
              "label": "onlyWhitelisted",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:1334"
            },
            {
              "contract": "MyNFT",
              "label": "whitelistedAddresses",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/MyNFT.sol:1335"
            },
            {
              "contract": "MyNFT",
              "label": "addressMintedBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/MyNFT.sol:1336"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "contracts/MyNFT.sol:120",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "contracts/MyNFT.sol:128"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "contracts/MyNFT.sol:121"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "contracts/MyNFT.sol:13",
        "version": {
          "withMetadata": "af4a6f58555948a60b215437bfff1b5392126abdb562fd1013d44761dcd70f9d",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "8eebea40a6c6d5e9233c28e71e8e376e48bec74c2379446a84d410bc8837f3fb",
          "withoutMetadata": "c27559f13002c2fc91544ee334c4af3167447aabbcde734326941801f7d3ab86",
          "linkedWithoutMetadata": "c27559f13002c2fc91544ee334c4af3167447aabbcde734326941801f7d3ab86"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "IERC721Enumerable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "9e5502b5a3a2e261f1b45be73db52afffa8a54c86c3f85f3ea2cfd8e9576dd79",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "4a26bb39c38c99454c7d02ffd0dab21f159d85e65fde7b74e3551f1f63418b07",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MyNFT": {
        "src": "contracts/MyNFT.sol:7",
        "version": {
          "withMetadata": "e895c9e6e9468630b6621dff1af76d7ab4f3faf6ed426b04ab399ff4f22f00c7",
          "withoutMetadata": "67339fc4ee96e49a574ed8d0226eba2f00eceeb2c593c5aa9c072f80cdd4dcd4",
          "linkedWithoutMetadata": "67339fc4ee96e49a574ed8d0226eba2f00eceeb2c593c5aa9c072f80cdd4dcd4"
        },
        "inherit": [
          "Ownable",
          "ERC721Enumerable",
          "IERC721Enumerable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "(string,string,string,string)",
          "mint(uint256)",
          "isWhitelisted(address)",
          "walletOfOwner(address)",
          "tokenURI(uint256)",
          "reveal()",
          "setNftPerAddressLimit(uint256)",
          "setCost(uint256)",
          "setmaxMintAmount(uint256)",
          "setBaseURI(string)",
          "setBaseExtension(string)",
          "setNotRevealedURI(string)",
          "pause(bool)",
          "setOnlyWhitelisted(bool)",
          "whitelistUsers(address[])",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/MyNFT.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "baseExtension",
            "src": "contracts/MyNFT.sol:11"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cost",
            "src": "contracts/MyNFT.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/MyNFT.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxMintAmount",
            "src": "contracts/MyNFT.sol:15"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nftPerAddressLimit",
            "src": "contracts/MyNFT.sol:16"
          },
          {
            "kind": "state-variable-assignment",
            "name": "paused",
            "src": "contracts/MyNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "revealed",
            "src": "contracts/MyNFT.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "onlyWhitelisted",
            "src": "contracts/MyNFT.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MyNFT",
              "label": "baseURI",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:10"
            },
            {
              "contract": "MyNFT",
              "label": "baseExtension",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:11"
            },
            {
              "contract": "MyNFT",
              "label": "notRevealedUri",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:12"
            },
            {
              "contract": "MyNFT",
              "label": "cost",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:13"
            },
            {
              "contract": "MyNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:14"
            },
            {
              "contract": "MyNFT",
              "label": "maxMintAmount",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:15"
            },
            {
              "contract": "MyNFT",
              "label": "nftPerAddressLimit",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:16"
            },
            {
              "contract": "MyNFT",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:17"
            },
            {
              "contract": "MyNFT",
              "label": "revealed",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:18"
            },
            {
              "contract": "MyNFT",
              "label": "onlyWhitelisted",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:19"
            },
            {
              "contract": "MyNFT",
              "label": "whitelistedAddresses",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/MyNFT.sol:20"
            },
            {
              "contract": "MyNFT",
              "label": "addressMintedBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/MyNFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "8eebea40a6c6d5e9233c28e71e8e376e48bec74c2379446a84d410bc8837f3fb",
          "withoutMetadata": "c27559f13002c2fc91544ee334c4af3167447aabbcde734326941801f7d3ab86",
          "linkedWithoutMetadata": "c27559f13002c2fc91544ee334c4af3167447aabbcde734326941801f7d3ab86"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:13",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "IERC721Enumerable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "9e5502b5a3a2e261f1b45be73db52afffa8a54c86c3f85f3ea2cfd8e9576dd79",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "4a26bb39c38c99454c7d02ffd0dab21f159d85e65fde7b74e3551f1f63418b07",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MyNFT": {
        "src": "contracts/MyNFT.sol:7",
        "version": {
          "withMetadata": "6eeff05c357858bd60f5e0fdc8521c827db6fe658cccedba01598a1c82388749",
          "withoutMetadata": "67339fc4ee96e49a574ed8d0226eba2f00eceeb2c593c5aa9c072f80cdd4dcd4",
          "linkedWithoutMetadata": "67339fc4ee96e49a574ed8d0226eba2f00eceeb2c593c5aa9c072f80cdd4dcd4"
        },
        "inherit": [
          "Ownable",
          "ERC721Enumerable",
          "IERC721Enumerable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "(string,string,string,string)",
          "mint(uint256)",
          "isWhitelisted(address)",
          "walletOfOwner(address)",
          "tokenURI(uint256)",
          "reveal()",
          "setNftPerAddressLimit(uint256)",
          "setCost(uint256)",
          "setmaxMintAmount(uint256)",
          "setBaseURI(string)",
          "setBaseExtension(string)",
          "setNotRevealedURI(string)",
          "pause(bool)",
          "setOnlyWhitelisted(bool)",
          "whitelistUsers(address[])",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/MyNFT.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "baseExtension",
            "src": "contracts/MyNFT.sol:11"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cost",
            "src": "contracts/MyNFT.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/MyNFT.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxMintAmount",
            "src": "contracts/MyNFT.sol:15"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nftPerAddressLimit",
            "src": "contracts/MyNFT.sol:16"
          },
          {
            "kind": "state-variable-assignment",
            "name": "paused",
            "src": "contracts/MyNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "revealed",
            "src": "contracts/MyNFT.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "onlyWhitelisted",
            "src": "contracts/MyNFT.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MyNFT",
              "label": "baseURI",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:10"
            },
            {
              "contract": "MyNFT",
              "label": "baseExtension",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:11"
            },
            {
              "contract": "MyNFT",
              "label": "notRevealedUri",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:12"
            },
            {
              "contract": "MyNFT",
              "label": "cost",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:13"
            },
            {
              "contract": "MyNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:14"
            },
            {
              "contract": "MyNFT",
              "label": "maxMintAmount",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:15"
            },
            {
              "contract": "MyNFT",
              "label": "nftPerAddressLimit",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:16"
            },
            {
              "contract": "MyNFT",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:17"
            },
            {
              "contract": "MyNFT",
              "label": "revealed",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:18"
            },
            {
              "contract": "MyNFT",
              "label": "onlyWhitelisted",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:19"
            },
            {
              "contract": "MyNFT",
              "label": "whitelistedAddresses",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/MyNFT.sol:20"
            },
            {
              "contract": "MyNFT",
              "label": "addressMintedBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/MyNFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "8eebea40a6c6d5e9233c28e71e8e376e48bec74c2379446a84d410bc8837f3fb",
          "withoutMetadata": "c27559f13002c2fc91544ee334c4af3167447aabbcde734326941801f7d3ab86",
          "linkedWithoutMetadata": "c27559f13002c2fc91544ee334c4af3167447aabbcde734326941801f7d3ab86"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Burnable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol:13",
        "inherit": [
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "IERC721Enumerable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "9e5502b5a3a2e261f1b45be73db52afffa8a54c86c3f85f3ea2cfd8e9576dd79",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "4a26bb39c38c99454c7d02ffd0dab21f159d85e65fde7b74e3551f1f63418b07",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MyNFT": {
        "src": "contracts/MyNFT.sol:7",
        "version": {
          "withMetadata": "6eeff05c357858bd60f5e0fdc8521c827db6fe658cccedba01598a1c82388749",
          "withoutMetadata": "67339fc4ee96e49a574ed8d0226eba2f00eceeb2c593c5aa9c072f80cdd4dcd4",
          "linkedWithoutMetadata": "67339fc4ee96e49a574ed8d0226eba2f00eceeb2c593c5aa9c072f80cdd4dcd4"
        },
        "inherit": [
          "Ownable",
          "ERC721Enumerable",
          "IERC721Enumerable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "(string,string,string,string)",
          "mint(uint256)",
          "isWhitelisted(address)",
          "walletOfOwner(address)",
          "tokenURI(uint256)",
          "reveal()",
          "setNftPerAddressLimit(uint256)",
          "setCost(uint256)",
          "setmaxMintAmount(uint256)",
          "setBaseURI(string)",
          "setBaseExtension(string)",
          "setNotRevealedURI(string)",
          "pause(bool)",
          "setOnlyWhitelisted(bool)",
          "whitelistUsers(address[])",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/MyNFT.sol:23"
          },
          {
            "kind": "state-variable-assignment",
            "name": "baseExtension",
            "src": "contracts/MyNFT.sol:11"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cost",
            "src": "contracts/MyNFT.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/MyNFT.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxMintAmount",
            "src": "contracts/MyNFT.sol:15"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nftPerAddressLimit",
            "src": "contracts/MyNFT.sol:16"
          },
          {
            "kind": "state-variable-assignment",
            "name": "paused",
            "src": "contracts/MyNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "revealed",
            "src": "contracts/MyNFT.sol:18"
          },
          {
            "kind": "state-variable-assignment",
            "name": "onlyWhitelisted",
            "src": "contracts/MyNFT.sol:19"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MyNFT",
              "label": "baseURI",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:10"
            },
            {
              "contract": "MyNFT",
              "label": "baseExtension",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:11"
            },
            {
              "contract": "MyNFT",
              "label": "notRevealedUri",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:12"
            },
            {
              "contract": "MyNFT",
              "label": "cost",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:13"
            },
            {
              "contract": "MyNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:14"
            },
            {
              "contract": "MyNFT",
              "label": "maxMintAmount",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:15"
            },
            {
              "contract": "MyNFT",
              "label": "nftPerAddressLimit",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:16"
            },
            {
              "contract": "MyNFT",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:17"
            },
            {
              "contract": "MyNFT",
              "label": "revealed",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:18"
            },
            {
              "contract": "MyNFT",
              "label": "onlyWhitelisted",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:19"
            },
            {
              "contract": "MyNFT",
              "label": "whitelistedAddresses",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/MyNFT.sol:20"
            },
            {
              "contract": "MyNFT",
              "label": "addressMintedBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/MyNFT.sol:21"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "8eebea40a6c6d5e9233c28e71e8e376e48bec74c2379446a84d410bc8837f3fb",
          "withoutMetadata": "c27559f13002c2fc91544ee334c4af3167447aabbcde734326941801f7d3ab86",
          "linkedWithoutMetadata": "c27559f13002c2fc91544ee334c4af3167447aabbcde734326941801f7d3ab86"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "IERC721Enumerable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "9e5502b5a3a2e261f1b45be73db52afffa8a54c86c3f85f3ea2cfd8e9576dd79",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "4a26bb39c38c99454c7d02ffd0dab21f159d85e65fde7b74e3551f1f63418b07",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MyNFT": {
        "src": "contracts/MyNFT.sol:6",
        "version": {
          "withMetadata": "44d73d5b3b292f3b6e61c55c6042f31b49c06d74e09b21f8c12dd85228a5faa1",
          "withoutMetadata": "67339fc4ee96e49a574ed8d0226eba2f00eceeb2c593c5aa9c072f80cdd4dcd4",
          "linkedWithoutMetadata": "67339fc4ee96e49a574ed8d0226eba2f00eceeb2c593c5aa9c072f80cdd4dcd4"
        },
        "inherit": [
          "Ownable",
          "ERC721Enumerable",
          "IERC721Enumerable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "(string,string,string,string)",
          "mint(uint256)",
          "isWhitelisted(address)",
          "walletOfOwner(address)",
          "tokenURI(uint256)",
          "reveal()",
          "setNftPerAddressLimit(uint256)",
          "setCost(uint256)",
          "setmaxMintAmount(uint256)",
          "setBaseURI(string)",
          "setBaseExtension(string)",
          "setNotRevealedURI(string)",
          "pause(bool)",
          "setOnlyWhitelisted(bool)",
          "whitelistUsers(address[])",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/MyNFT.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "baseExtension",
            "src": "contracts/MyNFT.sol:10"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cost",
            "src": "contracts/MyNFT.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/MyNFT.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxMintAmount",
            "src": "contracts/MyNFT.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nftPerAddressLimit",
            "src": "contracts/MyNFT.sol:15"
          },
          {
            "kind": "state-variable-assignment",
            "name": "paused",
            "src": "contracts/MyNFT.sol:16"
          },
          {
            "kind": "state-variable-assignment",
            "name": "revealed",
            "src": "contracts/MyNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "onlyWhitelisted",
            "src": "contracts/MyNFT.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MyNFT",
              "label": "baseURI",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:9"
            },
            {
              "contract": "MyNFT",
              "label": "baseExtension",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:10"
            },
            {
              "contract": "MyNFT",
              "label": "notRevealedUri",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:11"
            },
            {
              "contract": "MyNFT",
              "label": "cost",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:12"
            },
            {
              "contract": "MyNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:13"
            },
            {
              "contract": "MyNFT",
              "label": "maxMintAmount",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:14"
            },
            {
              "contract": "MyNFT",
              "label": "nftPerAddressLimit",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:15"
            },
            {
              "contract": "MyNFT",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:16"
            },
            {
              "contract": "MyNFT",
              "label": "revealed",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:17"
            },
            {
              "contract": "MyNFT",
              "label": "onlyWhitelisted",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:18"
            },
            {
              "contract": "MyNFT",
              "label": "whitelistedAddresses",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/MyNFT.sol:19"
            },
            {
              "contract": "MyNFT",
              "label": "addressMintedBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/MyNFT.sol:20"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:28"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "version": {
          "withMetadata": "8eebea40a6c6d5e9233c28e71e8e376e48bec74c2379446a84d410bc8837f3fb",
          "withoutMetadata": "c27559f13002c2fc91544ee334c4af3167447aabbcde734326941801f7d3ab86",
          "linkedWithoutMetadata": "c27559f13002c2fc91544ee334c4af3167447aabbcde734326941801f7d3ab86"
        },
        "inherit": [
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address",
          "Strings"
        ],
        "methods": [
          "(string,string)",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC721",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:24"
            },
            {
              "contract": "ERC721",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:27"
            },
            {
              "contract": "ERC721",
              "label": "_owners",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "contract": "ERC721",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:33"
            },
            {
              "contract": "ERC721",
              "label": "_tokenApprovals",
              "type": "t_mapping(t_uint256,t_address)",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:36"
            },
            {
              "contract": "ERC721",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:14",
        "inherit": [
          "IERC721Enumerable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokens",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:16"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_ownedTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokens",
              "type": "t_array(t_uint256)dyn_storage",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "contract": "ERC721Enumerable",
              "label": "_allTokensIndex",
              "type": "t_mapping(t_uint256,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:25"
            }
          ],
          "types": {
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "IERC721",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:9",
        "version": {
          "withMetadata": "9e5502b5a3a2e261f1b45be73db52afffa8a54c86c3f85f3ea2cfd8e9576dd79",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:186"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:9",
        "version": {
          "withMetadata": "4a26bb39c38c99454c7d02ffd0dab21f159d85e65fde7b74e3551f1f63418b07",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:22",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "MyNFT": {
        "src": "contracts/MyNFT.sol:6",
        "version": {
          "withMetadata": "44d73d5b3b292f3b6e61c55c6042f31b49c06d74e09b21f8c12dd85228a5faa1",
          "withoutMetadata": "67339fc4ee96e49a574ed8d0226eba2f00eceeb2c593c5aa9c072f80cdd4dcd4",
          "linkedWithoutMetadata": "67339fc4ee96e49a574ed8d0226eba2f00eceeb2c593c5aa9c072f80cdd4dcd4"
        },
        "inherit": [
          "Ownable",
          "ERC721Enumerable",
          "IERC721Enumerable",
          "ERC721",
          "IERC721Metadata",
          "IERC721",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Strings"
        ],
        "methods": [
          "(string,string,string,string)",
          "mint(uint256)",
          "isWhitelisted(address)",
          "walletOfOwner(address)",
          "tokenURI(uint256)",
          "reveal()",
          "setNftPerAddressLimit(uint256)",
          "setCost(uint256)",
          "setmaxMintAmount(uint256)",
          "setBaseURI(string)",
          "setBaseExtension(string)",
          "setNotRevealedURI(string)",
          "pause(bool)",
          "setOnlyWhitelisted(bool)",
          "whitelistUsers(address[])",
          "withdraw()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "MyNFT",
            "src": "contracts/MyNFT.sol:22"
          },
          {
            "kind": "state-variable-assignment",
            "name": "baseExtension",
            "src": "contracts/MyNFT.sol:10"
          },
          {
            "kind": "state-variable-assignment",
            "name": "cost",
            "src": "contracts/MyNFT.sol:12"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxSupply",
            "src": "contracts/MyNFT.sol:13"
          },
          {
            "kind": "state-variable-assignment",
            "name": "maxMintAmount",
            "src": "contracts/MyNFT.sol:14"
          },
          {
            "kind": "state-variable-assignment",
            "name": "nftPerAddressLimit",
            "src": "contracts/MyNFT.sol:15"
          },
          {
            "kind": "state-variable-assignment",
            "name": "paused",
            "src": "contracts/MyNFT.sol:16"
          },
          {
            "kind": "state-variable-assignment",
            "name": "revealed",
            "src": "contracts/MyNFT.sol:17"
          },
          {
            "kind": "state-variable-assignment",
            "name": "onlyWhitelisted",
            "src": "contracts/MyNFT.sol:18"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "MyNFT",
              "label": "baseURI",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:9"
            },
            {
              "contract": "MyNFT",
              "label": "baseExtension",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:10"
            },
            {
              "contract": "MyNFT",
              "label": "notRevealedUri",
              "type": "t_string_storage",
              "src": "contracts/MyNFT.sol:11"
            },
            {
              "contract": "MyNFT",
              "label": "cost",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:12"
            },
            {
              "contract": "MyNFT",
              "label": "maxSupply",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:13"
            },
            {
              "contract": "MyNFT",
              "label": "maxMintAmount",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:14"
            },
            {
              "contract": "MyNFT",
              "label": "nftPerAddressLimit",
              "type": "t_uint256",
              "src": "contracts/MyNFT.sol:15"
            },
            {
              "contract": "MyNFT",
              "label": "paused",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:16"
            },
            {
              "contract": "MyNFT",
              "label": "revealed",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:17"
            },
            {
              "contract": "MyNFT",
              "label": "onlyWhitelisted",
              "type": "t_bool",
              "src": "contracts/MyNFT.sol:18"
            },
            {
              "contract": "MyNFT",
              "label": "whitelistedAddresses",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/MyNFT.sol:19"
            },
            {
              "contract": "MyNFT",
              "label": "addressMintedBalance",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/MyNFT.sol:20"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}